[{"C:\\Users\\hrshk\\Desktop\\fyle-frontend\\src\\index.js":"1","C:\\Users\\hrshk\\Desktop\\fyle-frontend\\src\\App.js":"2","C:\\Users\\hrshk\\Desktop\\fyle-frontend\\src\\reportWebVitals.js":"3","C:\\Users\\hrshk\\Desktop\\fyle-frontend\\src\\components\\BranchDetails.js":"4"},{"size":591,"mtime":1611422312000,"results":"5","hashOfConfig":"6"},{"size":348,"mtime":1612762544091,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611422312000,"results":"8","hashOfConfig":"6"},{"size":10905,"mtime":1612762077141,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"nmk1s1",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\Users\\hrshk\\Desktop\\fyle-frontend\\src\\index.js",[],["20","21"],"C:\\Users\\hrshk\\Desktop\\fyle-frontend\\src\\App.js",[],"C:\\Users\\hrshk\\Desktop\\fyle-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\hrshk\\Desktop\\fyle-frontend\\src\\components\\BranchDetails.js",["22","23","24","25","26","27"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Table,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink,\r\n\r\n} from \"reactstrap\";\r\n\r\nimport axios from \"axios\";\r\nimport { setupCache } from \"axios-cache-adapter\";\r\nimport { DebounceInput } from \"react-debounce-input\";\r\n\r\nconst searchAPICall =\r\n  \"https://hk-fyle-backend.herokuapp.com/api/branches?q=\";\r\nconst cityAPICall =\r\n  \"https://hk-fyle-backend.herokuapp.com/api/branches/autocomplete?q=\";\r\n\r\n\r\n\r\nconst BranchDetails = () => {\r\n  const cache = setupCache({\r\n    maxAge: 15 * 60 * 1000,\r\n  });\r\n  const api = axios.create({\r\n    adapter: cache.adapter,\r\n  });\r\n  \r\n\r\n    const url = \"\";\r\n  const [currentCity, setCity] = useState(\"Mumbai\");\r\n  const [searchQuery, setSearchQuery] = useState(null);\r\n  const [limit, setLimit] = useState(10);\r\n  const [offset, setOffset] = useState(0);\r\n  const [tableData, setTableData] = useState(null);\r\n  const [checkboxValue, setCheckboxValue] = useState(false);\r\n  const [lastTableData, setLastTableData] = useState();\r\n\r\n  useEffect(() => {\r\n    if (checkboxValue) {\r\n      setLastTableData(tableData);\r\n      setTableData(JSON.parse(localStorage.getItem(\"favourites\")));\r\n    } else setTableData(lastTableData);\r\n  }, [checkboxValue]);\r\n  useEffect(() => {\r\n    api({\r\n      url:\r\n        url +\r\n        cityAPICall +\r\n        currentCity +\r\n        \"&limit=\" +\r\n        limit +\r\n        \"&offset=\" +\r\n        offset,\r\n      method: \"get\",\r\n    })\r\n      .then((result) => {\r\n        setTableData(result.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, [currentCity]);\r\n  useEffect(async () => {\r\n    if (searchQuery && searchQuery !== \"\") {\r\n      api({\r\n        url:\r\n          url +\r\n          searchAPICall +\r\n          searchQuery +\r\n          \"&limit=\" +\r\n          limit +\r\n          \"&offset=\" +\r\n          offset,\r\n        method: \"get\",\r\n      })\r\n        .then((result) => {\r\n          setTableData(result.data);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else {\r\n      api({\r\n        url:\r\n          url +\r\n          cityAPICall +\r\n          currentCity +\r\n          \"&limit=\" +\r\n          limit +\r\n          \"&offset=\" +\r\n          offset,\r\n        method: \"get\",\r\n      })\r\n        .then((result) => {\r\n          setTableData(result.data);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  }, [limit]);\r\n  useEffect(() => {\r\n    if (searchQuery && searchQuery !== \"\") {\r\n      api({\r\n        url:\r\n          url +\r\n          searchAPICall +\r\n          searchQuery +\r\n          \"&limit=\" +\r\n          limit +\r\n          \"&offset=\" +\r\n          offset,\r\n        method: \"get\",\r\n      })\r\n        .then((result) => {\r\n          setTableData(result.data);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else {\r\n      api({\r\n        url:\r\n          url +\r\n          cityAPICall +\r\n          currentCity +\r\n          \"&limit=\" +\r\n          limit +\r\n          \"&offset=\" +\r\n          offset,\r\n        method: \"get\",\r\n      })\r\n        .then((result) => {\r\n          setTableData(result.data);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  }, [offset]);\r\n  useEffect(() => {\r\n    if (searchQuery && searchQuery !== \"\") {\r\n      api({\r\n        url:\r\n          url +\r\n          searchAPICall +\r\n          searchQuery +\r\n          \"&limit=\" +\r\n          limit +\r\n          \"&offset=\" +\r\n          offset,\r\n        method: \"get\",\r\n      })\r\n        .then((result) => {\r\n          setTableData(result.data);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else {\r\n      api({\r\n        url:\r\n          url +\r\n          cityAPICall +\r\n          currentCity +\r\n          \"&limit=\" +\r\n          limit +\r\n          \"&offset=\" +\r\n          offset,\r\n        method: \"get\",\r\n      })\r\n        .then((result) => {\r\n          setTableData(result.data);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  }, [searchQuery]);\r\n  return (\r\n    <div align=\"center\" className=\"container\">\r\n      \r\n      <div>\r\n        <div>\r\n          <Form>\r\n            <FormGroup style={{ display: \"flex\" }}>\r\n              <Label for=\"citySelection\">City :</Label> {\"   \"}\r\n              <Input\r\n                style={{ width: \"20%\" ,border :\"2px solid grey\",borderRadius : '20px'  }}\r\n                type=\"select\"\r\n                name=\"citySelection\"\r\n                id=\"citySelection\"\r\n                onChange={(e) => {\r\n                  setCity(e.target.value);\r\n                }}\r\n              >\r\n                <option>Bangalore</option>\r\n                <option>Indore</option>\r\n                <option>Hyderabad</option>\r\n                <option>Mumbai</option>\r\n                <option>Pune</option>\r\n              </Input>\r\n              <Label className=\"ml-auto\" for=\"searchForBranch\">\r\n                Search:\r\n              </Label>\r\n              <DebounceInput\r\n                style={{ width: \"40%\" ,border :\"2px solid grey\",borderRadius : '20px'  }}\r\n                placeholder=\"Search by ifsc, branch , address, city, state etc......\"\r\n                minLength={3}\r\n                debounceTimeout={100}\r\n                onChange={(event) => setSearchQuery(event.target.value)}\r\n              />\r\n            </FormGroup>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <div >\r\n          {tableData ? (\r\n            <Table >\r\n              <thead>\r\n                <tr>\r\n                  <th>IFSC</th>\r\n                  <th>BANKID</th>\r\n                  <th>BRANCH</th>\r\n                  <th>ADDRESS</th>\r\n                  <th>CITY</th>\r\n                  <th>DISTRICT</th>\r\n                  <th>STATE</th>\r\n                  <th>FAVOURITE</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tableData.map((branch, index) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>{branch.ifsc}</td>\r\n                      <td>{branch.bank_id}</td>\r\n                      <td>{branch.branch}</td>\r\n                      <td>{branch.address}</td>\r\n                      <td>{branch.city}</td>\r\n                      <td>{branch.district}</td>\r\n                      <td>{branch.state}</td>\r\n                      <td>\r\n                        <Button\r\n                           style={{width : \"100px\",background : \"black\", border: \"2px solid grey\", borderRadius  : \"30px\" }}\r\n                          onClick={() => {\r\n                            var fav = JSON.parse(\r\n                              localStorage.getItem(\"favourites\")\r\n                            );\r\n\r\n                            if (fav) {\r\n                              if (fav.some((item) => item.ifsc === branch.ifsc))\r\n                                alert(\"Already a favourite\");\r\n                              else {\r\n                                fav.push(branch);\r\n                                localStorage.setItem(\r\n                                  \"favourites\",\r\n                                  JSON.stringify(fav)\r\n                                );\r\n                                alert( `${branch.ifsc} was added to favourites`);\r\n                              }\r\n                            } else {\r\n                              var L = [];\r\n                              L.push(branch);\r\n                              localStorage.setItem(\r\n                                \"favourites\",\r\n                                JSON.stringify(L)\r\n                              );\r\n                              alert(`${branch.ifsc} was added to favourites`);\r\n                            }\r\n                          }}\r\n                        >\r\n                          Add\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          ) : checkboxValue ? (\r\n            <div style={{ justifyContent: \"center\" }}>No favourite exists</div>\r\n          ) : (\r\n            <h2 align=\"center\">Loading....</h2>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div salign=\"center\" >\r\n        <div >\r\n          <Pagination size=\"md\" >\r\n            <PaginationItem  >\r\n              <PaginationLink onClick={() => setOffset(0)} first />\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n              <PaginationLink \r\n                onClick={() => {\r\n                  if (offset > 0) setOffset(offset - limit);\r\n                }}\r\n                previous\r\n              />\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n              <PaginationLink onClick={() => setOffset(0)}>1</PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n              <PaginationLink onClick={() => setOffset(limit)}>\r\n                2\r\n              </PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n              <PaginationLink onClick={() => setOffset(limit * 2)}>\r\n                3\r\n              </PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n              <PaginationLink\r\n                onClick={() => {\r\n                  if (tableData) setOffset(offset + limit);\r\n                }}\r\n                next\r\n              />\r\n            </PaginationItem>\r\n          </Pagination>\r\n          <Form>\r\n            <FormGroup style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <Label for=\"limitChange\">Rows : </Label>\r\n              <Input\r\n                style={{color : \"white\",width : \"100px\",background : \"black\", border: \"2px solid grey\", borderRadius  : \"30px\" }} \r\n                type=\"select\"\r\n                name=\"limitChange\"\r\n                id=\"limitChange\"\r\n                onChange={(e) => {\r\n                  setLimit(e.target.value);\r\n                }}\r\n              >\r\n                <option>10</option>\r\n                <option>20</option>\r\n                <option>30</option>\r\n                <option>40</option>\r\n                <option>50</option>\r\n              </Input>\r\n              <Label\r\n                style={{\r\n                  marginLeft: \"auto\",\r\n                  justifyContent: \"center\",\r\n                  marginRight: \"200px\",\r\n                }}\r\n                check\r\n              >\r\n                <Input\r\n                  style={{color : \"white\",background: \"black\",  border: \"2px solid grey\", borderRadius  : \"30px\" }}\r\n                  onClick={() => setCheckboxValue(!checkboxValue)}\r\n                  type=\"button\"\r\n                  value={checkboxValue ? \"Hide Favourite \":\" Show Favourite\"}\r\n                />{\" \"}\r\n                \r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BranchDetails;",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":49,"column":6,"nodeType":"34","endLine":49,"endColumn":21,"suggestions":"35"},{"ruleId":"32","severity":1,"message":"36","line":66,"column":6,"nodeType":"34","endLine":66,"endColumn":19,"suggestions":"37"},{"ruleId":"32","severity":1,"message":"38","line":67,"column":13,"nodeType":"39","endLine":101,"endColumn":4},{"ruleId":"32","severity":1,"message":"40","line":101,"column":6,"nodeType":"34","endLine":101,"endColumn":13,"suggestions":"41"},{"ruleId":"32","severity":1,"message":"42","line":136,"column":6,"nodeType":"34","endLine":136,"endColumn":14,"suggestions":"43"},{"ruleId":"32","severity":1,"message":"44","line":171,"column":6,"nodeType":"34","endLine":171,"endColumn":19,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'lastTableData' and 'tableData'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTableData' needs the current value of 'lastTableData'.","ArrayExpression",["48"],"React Hook useEffect has missing dependencies: 'api', 'limit', and 'offset'. Either include them or remove the dependency array.",["49"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'api', 'currentCity', 'offset', and 'searchQuery'. Either include them or remove the dependency array.",["50"],"React Hook useEffect has missing dependencies: 'api', 'currentCity', 'limit', and 'searchQuery'. Either include them or remove the dependency array.",["51"],"React Hook useEffect has missing dependencies: 'api', 'currentCity', 'limit', and 'offset'. Either include them or remove the dependency array.",["52"],"no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},{"desc":"57","fix":"59"},{"desc":"57","fix":"60"},"Update the dependencies array to be: [checkboxValue, lastTableData, tableData]",{"range":"61","text":"62"},"Update the dependencies array to be: [api, currentCity, limit, offset]",{"range":"63","text":"64"},"Update the dependencies array to be: [api, currentCity, limit, offset, searchQuery]",{"range":"65","text":"66"},{"range":"67","text":"66"},{"range":"68","text":"66"},[1285,1300],"[checkboxValue, lastTableData, tableData]",[1640,1653],"[api, currentCity, limit, offset]",[2438,2445],"[api, currentCity, limit, offset, searchQuery]",[3224,3232],[4011,4024]]